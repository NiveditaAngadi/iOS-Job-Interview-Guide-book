##Basics##
1. Why Swift is called Type Safe language?
Ans: Swift is a type-safe language, which means the language helps you to be clear about the types of values your code can work with. 
A type safe language encourages you to be clear about the types of values your code can work with. 
If part of your code requires a String, type safety prevents you from passing it an Int by mistake. Likewise, type safety prevents 
you from accidentally passing an optional String to a piece of code that requires a non-optional String. 
Type safety helps you catch and fix errors as early as possible in the development process.
Because Swift is type safe, it performs type checks when compiling your code and flags any mismatched types as errors.
This enables you to catch and fix errors as early as possible in the development process.

2. Value of the constant can not be changed once it's set. Define by the "let". 

“Declare a new constant called maximumNumberOfLoginAttempts, and give it a value of 10. Then, declare a new variable called currentLoginAttempt, 
and give it an initial value of 0.”
let maximumNumberOfLoginAttempts = 10
var currentLoginAttempt = 0

3. When to use let / var? 
Ans: If a stored value in your code won’t change, always declare it as a constant with the let keyword. 
Use variables only for storing values that change.

When you declare a constant or a variable, you can give it a value as part of that declaration, like the examples above. 
Alternatively, you can assign its initial value later in the program, 
as long as it’s guaranteed to have a value before the first time you read from it.

4. Type annotations - Way to provide information about what kind of data. 
var welcomeMessage: String

5. Type inference - When you provide the initial value to the constant or variable - swift automatically infer the type of data. 
Type inference enables a compiler to deduce the type of a particular expression automatically when it compiles your code, 
simply by examining the values you provide.

6. Naming Constant/ Variable ->
Constant and variable names can contain almost any character, including Unicode characters:
Constant and variable names can’t contain whitespace characters, mathematical symbols, arrows, 
private-use Unicode scalar values, or line- and box-drawing characters. 
Nor can they begin with a number, although numbers may be included elsewhere within the name.

7. You can print the current value of a constant or variable with the print(_:separator:terminator:) function: 
Its global function. 

8. String Interpolation -> 
Swift uses string interpolation to include the name of a cnstant or variable as a placeholder in a longer string, 
and to prompt Swift to replace it with the current value of that constant or variable. 
Wrap the name in parentheses and escape it with a backslash before the opening parenthesis:
let a = 10 
print("Value of a is \(a)")

9.Difference between Double and Float?
Double represents a 64-bit floating-point number. Precision of at least 15 decimal digits. 
Float represents a 32-bit floating-point number. Precision of at least 6 decimal digits.
In situations where either type would be appropriate, Double is preferred. 
Swift always chooses Double (rather than Float) when inferring the type of floating-point numbers.

10.What is Type Aliases?
Type aliases define an alternative name for an existing type. You define type aliases with the "typealias" keyword.

11. What is Tuples?
Tuples group multiple values into a single compound value. 
The values within a tuple can be of any type and don’t have to be of the same type as each other.
Example: let http404Error = (404, "Not Found")
If you only need some of the tuple’s values, ignore parts of the tuple with an underscore (_) when you decompose the tuple.
Alternatively, access the individual element values in a tuple using index numbers starting at zero.
You can name the individual elements in a tuple when the tuple is defined and also can access value from that name. 

11. What is Optional?
You use optionals in situations where a value may be absent. 
An optional represents two possibilities: Either there is a value of a specified type, 
and you can unwrap the optional to access that value, or there isn’t a value at all.
To write an optional type, you write a question mark (?) after the name of the type that the optional contains 
for example, the type of an optional Int is Int?. An optional Int always contains either some Int value or no value at all. 
It can’t contain anything else, like a Bool or String value.

A type that represents either a wrapped value or the absence of a value.
@frozen 
enum Optional<Wrapped> where Wrapped : ~Copyable

enum Optional<Wrapped>: ExpressibleByNilLiteral {
 case none 
 case some(Wrapped)
}

12. What is @frozen? 
In Swift, the @frozen attribute(swift constructs) is used to optimize the performance of enum types by making the set of cases as fixed. 
When an enum is marked as frozen, the Swift Compiler can perform various optimization that improve memory usage, performance and pattern matching. 
The @frozen attribute is used to freeze an enum, indicating that the set of enum cases is final and cannot be extended in future versions of the code. 

Why Use @frozen?
- Performance Optimization: By freezing the enum, the compiler can optimize the layout of the enum in memory. 
This can lead to better performance, especially in cases where pattern matching is heavily used.
- Lower Memory Usage: The compiler can make certain assumptions about the size of the enum, reducing memory overhead.
- Faster Matching: If the set of cases is fixed, pattern matching can be more efficient. 
The compiler doesn't need to check for additional cases that could be added later.

12. What is nil?
Valueless state
You set an optional variable to a valueless state by assigning it the special value nil:
If you define an optional variable without providing a default value, the variable is automatically set to nil
You can use an "if" statement to find out whether an optional contains a value by comparing the optional against nil.

When you access an optional value, your code always handles both the nil and non-nil case. 
There are several things you can do when a value is missing, as described in the following sections:
- Skip the code that operates on the value when it’s nil.
- Propagate the nil value, by returning nil or using the ?. operator
- Provide a fallback value, using the ?? operator.
- Stop program execution, using the ! operator.

Note:
In Objective-C, nil is a pointer to a nonexistent object. In Swift, nil isn’t a pointer — it’s the absence of a value of a certain type.
Optionals of any type can be set to nil, not just object types.

13. What is Optional Binding?
You use optional binding to find out whether an optional contains a value, and if so, 
to make that value available as a temporary constant or variable.

14. Ways for optional binding?
a. - if let 
: if let <#constantName#> = <#someOptional#> {
   <#statements#>
}
b. - guard
c. - while 
You can extract that value into constant and variable. 

d. Another way to handle the missing value is providing a default value using ?? (nil-coalescing operator).

e. Force-unwrap - 
When nil represents an unrecoverable failure, such as a programmer error or corrupted state, 
you can access the underlying value by adding an exclamation mark (!) to the end of the optional’s name. 
This is known as force unwrapping the optional’s value.
When you force unwrap a non-nil value, the result is its unwrapped value. 
Force unwrapping a nil value triggers a runtime error.
The ! is, effectively, a shorter spelling of fatalError(_:file:line:). For example, the code below shows two equivalent approaches:

let possibleNumber = "123"
let convertedNumber = Int(possibleNumber)
let number = convertedNumber!

guard let number = convertedNumber else {
    fatalError("The number was invalid")
}

15. Implicitly Unwrapped Optionals:
Sometimes it’s clear from a program’s structure that an optional will always have a value, after that value is first set. 
In these cases, it’s useful to remove the need to check and unwrap the optional’s value every time it’s accessed, 
because it can be safely assumed to have a value all of the time.These kinds of optionals are defined as implicitly unwrapped optionals.
Implicitly unwrapped optionals are useful when an optional’s value is confirmed to exist immediately 
after the optional is first defined and can definitely be assumed to exist at every point thereafter. 
The primary use of implicitly unwrapped optionals in Swift is during class initialization.
Don’t use an implicitly unwrapped optional when there’s a possibility of a variable becoming nil at a later point. 
Always use a normal optional type if you need to check for a nil value during the lifetime of a variable.

16. Error Handling:
When a function encounters an error condition, it throws an error. That function’s caller can then catch the error and respond appropriately.
func canThrowAnError() throws {
    // this function may or may not throw an error
}
A function indicates that it can throw an error by including the throws keyword in its declaration. When you call a function that can throw an error, you prepend the try keyword to the expression.
Swift automatically propagates errors out of their current scope until they’re handled by a catch clause.
do {
    try canThrowAnError()
    // no error was thrown
} catch {
    // an error was thrown
}
A do statement creates a new containing scope, which allows errors to be propagated to one or more catch clauses.

Assertions and Preconditions:
Assertions and preconditions are checks that happen at runtime. You use them to make sure an essential condition is satisfied before executing any further code.
If the Boolean condition in the assertion or precondition evaluates to true, code execution continues as usual. 
If the condition evaluates to false, the current state of the program is invalid; code execution ends, and your app is terminated.
Assertions help you find mistakes and incorrect assumptions during development,
and preconditions help you detect issues in production.

assertions and preconditions aren’t used for recoverable or expected errors. 
Because a failed assertion or precondition indicates an invalid program state, there’s no way to catch a failed assertion.
Recovering from an invalid state is impossible. 
When an assertion fails, at least one piece of the program’s data is invalid — but you don’t know why it’s invalid or whether an additional state is also invalid.


