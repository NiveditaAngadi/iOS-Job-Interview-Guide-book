Reference:
https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW1
https://dev.to/fmo91/dispatchgroup-in-swift-gg7

1. What is GCD - Grand Central Dispatch?
Grand Cetral Dispatch (GCD) dispatch queues are a powerful tool for performing tasks. 
It let you execute arbitrary blocks of code either asynchronously or synchronously with respect to the caller.

A dispatch queue is an object-like strcuture that manages the tasks you submit to it. 
All dispatch queues are first-in, first-out data structures. 
Thus the tasks you add to a queue are always started in the same order they were added. 

GCD provides some dispatch queues automatically and some are developer needs to create as per the specific purpose. 

2. What are the types of dispatch queues?
  a. Serial 
  b. Concurrent 
  c. Main Dispatch Queue 

3. What is serial disptch queue?
Serial queues (also known as "private dispatch queues") execute one task at a time in the order in which they are added to the queue. 
The currently executing task runs on a distinct thread that is managed by the dispatch queue. Serial queues are often used to synchronize
access to a specific resource. 
let serialQueue = DispatchQueue(label: "com.example.serial)
serialQueue.async {
print("Task 1")
}
serialQueue.async {
print("Task 2")
}

4. What is concurrent dispatch queue?
Concurrent queues (also knowns as "global dispatch queues") execute one or more tasks concurrently, 
but tasks are still started in the order in which they are added to the queue. 
The currently executing tasks run on distinct thereads are managed by the disptach queue. 
You can create concurrent disptch queues by specifying DISPATCH_QUEUE_CONCURRENT as the queue type. 
There are four predfined global concurrent queues for your application to use.
Concurrent Queues provided by the system for background tasks. 

DispatchQueue.global(qos: .background).async {
print("Background task")
}

let concurrentQueue = DispatchQueue(label: "com.example.concurrent", attributes: .concurrent)
concurrentQueue.async {
print("Task A")
}

concurrentQueue.async {
print("Task B")
}

5. What is main dispatch queue?
The main dispatch queue is a "globally available serial queue" that executes tasks on the "application's main thread". 
The queue works with the application's run loop to interleave the execution of queued tasks with execution of other event sources attached to the 
run loop. 
Becuase it runs on your application's main thread, the main queue is often used as a key synchronization point for an application. 

DispatchQueue.main.async {
 print("Update UI")
}

6. What are the advantages of using dispatch queue as compare to thread?
a. The advantages of dispatch queues are they are simpler to use and much more efficient at executing those tasks than the corresponding 
threaded code. With the threads you have to write code both for the work you want to perform and for the creation and configure and 
management, schedule of the threads themselves.
Dispatch queues let you focus on the work you actually want to perform without having to worry about the thread creation and managment. 
The thread creation and management responsibilities taken by the system efficiently based on the availability of resources. 
b. Queue-based synchronization is more efficient than locks because locks always require an expensive kernel trap in both 
the contested and uncontested cases, where as a dispatch queue works primarily in your application's process space and only calls down to the 
kernel when absolutely necessary. 

7. What are the key points to remember about dispatch queues?
 a. Dispatch queue execute their tasks concurrently with respect to other dispatch queues. The serialization of tasks limited to the tasks in a single dispatch queue.
 b. The system determines the total number of tasks executing at any one time. 
 c. The system takes queue priority levels into account when chosing which new task to start. 
 d. Tasks in a queue must be ready to execute at the time they are added to the queue. 
 e. Private dispatch queues are refrence counted. In addition to the queue retaining in your code, 
 be aware that dispatch sources can also be attached to a queue and also increment its retain count. 
Thus, you must make sure that all dispatch sources are canceled and all retain calls are balanced with an appropriate release call.

8. What is Quality of Service(QoS) in GCD? Why is it important?
QoS defines the priority level of tasks to ensure optimal system resource usage. It includes, 
 - User-Interactive: Tasks that keep the UI responsive (e.g., animations).
 - User-Initiated: Tasks initiated by the user that require immediate results(e.g., loading data)
 - Utility: Tasks with longer durations, such as downloads 
 - Background: Low-priority tasks, like syncing 
 DispatchQueue.global(qos: .userInitiated).async {
 print("High-priority task")
 }

9. What are queue-related technologies provided by GCD?
  a. Dispatch groups -> Way to monitor a set of block objects for completion. 
  b. Disptach semaphore -> Simillar to the semaphore but is generally more efficient. 
  c. Dispatch sources -> A dispatch source generates notifications in response to specific types of system events. 
You can use dispatch sources to monitor events such as process notifications, signals, and descriptor events among others. 

10. How do you create and manage dispatch queues?
Dispatch queues can execute tasks either serially or concurrently. 
A concurrent dispatch queue is useful when you have multiple tasks that can run in parallel. 
A concurrent queue is still a queue in that it dequeues tasks in a first-in first-out order. 

The system provides each application with four concurrent dispatch queues. 
These queues are global to the application and are differentiated only by their priority level.
Since they are global, you do not create them explicitly. 

let dispatchQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)

Serial Dispatch Queue:
Serial queues are useful when you want your tasks to execute in a specific order. 
A serial queue executes only one task at a time and always pulls tasks from the head of the queue.
You might use a serial queue instead of a lock to protect a shared resource or mutable data structure. 
Unlike a lock, a serial queue ensures that tasks are executed in a predictable order. 
And as long as you submit your tasks to a serial queue asynchronously, the queue can never deadlock.

let queue = DipatchQueue.init(label: "serialQueue")
queue.async {

}

In addition to any custom queues you create, the system automatically creates a serial queue and binds it to your application’s main thread.

10. What are the common queues at runtime?
 a. dispatch_get_current_queue -> function for debugging purposes or to test the identity of the current queue. 
  Calling this function from outside of a block returns the default concurrent queue for your application.
 b. dispatch_get_main_queue -> function to get the serial dispatch queue associated with your application’s main thread. 
 c. dispatch_get_global_queue -> function to get any of the shared concurrent queues.

11. What is clean up function for a queue?
After you create a serial dispatch queue, you can attach a finalizer function to perform any custom clean up when the queue is deallocated.
Dispatch queues are reference counted objects and you can use the dispatch_set_finalizer_f function 
to specify a function to be executed when the reference count of your queue reaches zero.

13. What is asynchronous and synchronous in GCD. 
  •	async: Submits a task for execution and returns immediately without waiting for the task to complete. Non-blocking.
	•	sync: Submits a task and waits for it to complete before proceeding. Blocking.

let queue = DispatchQueue(label: "com.example.queue")
queue.async {
 print("Async task")
}

queue.sync {
 print("Sync task")
}

14. How do you add(dispatch) tasks asynchronously to the queue?
You use "dispatch_async"  and "dispatch_async_f" function is preferred. 
When you add a block object or function to a queue, there is no way to know when that code will execute. 
As a result, adding blocks or functions asynchronously lets you schedule the execution of the code and continue to do other work from the calling thread. 

This is especially important if you are scheduling the task from your application’s main thread—perhaps in response to some user event.

15. How do you add(dispatch) tasks synchronously to the queue?
There may be a case where you need to add tasks synchronously to prevent race conditions or synchronization errors. 
In this instances, you can use the dispatch_sync and dispatch_sync_f functions to add the task to the queue. 
These functions block the current thread of execution until the specified task finishes executing.

let queue =  DispatchQueue(label: "MyQueue")

queue.async {
    print("Do some work here async\n")
}

print("The first block may or may not have run.\n")

queue.sync {
    print("Do some more work here.\n")
}

print("Both blocks have completed.")

// Output 
Do some work here async

The first block may or may not have run.

Do some more work here.

Both blocks have completed.

16. How do you inform the task completion in case of dispatch queue?
With the dispatch queue you can use - completion block.
A completion block is just another piece of code that you dispatch to a queue at the end of your original task. 
The calling code typically provides the completion block as a parameter when it starts the task. 
All the task code has to do is submit the specified block or function to the specified queue when it finishes its work.

17. How do you suspend and resume queues?
You can prevent a queue from executing block objects temprorarily by suspending it. 
You suspend a dispatch queue using the dispatch_suspend function and resume it using the dispatch_resume function.

18. Explain about dispatch semaphore.
If the tasks you are submitting to dispatch queues access some finite resource, 
you may want to use a dispatch semaphore to regulate the number of tasks simultaneously accessing that resource.

19. How dispatch semaphore is different than the system semaphore?
 A dispatch semaphore works like a regular semaphore with one exception. 
When resources are available, it takes less time to acquire a dispatch semaphore than it does to acquire a traditional system semaphore. 
This is because Grand Central Dispatch does not call down into the kernel for this particular case. 
The only time it calls down into the kernel is when the resource is not available 
and the system needs to park your thread until the semaphore is signaled.

20. Semantics for using a dispatch semaphore. 
  a. Create the semaphore - dispatch_semaphore_create function.
  b. In each task, call dispatch_semaphore_wait to wait on the semaphore.
  c. When the wait call returns, acquire the resource and do your work.
  d. When you are done with the resource, release it and signal the semaphore by calling the dispatch_semaphore_signal function.

let semaphore = DispatchSemaphore(value: 2)

DispatchQueue.global().async {
    semaphore.wait()
    print("Task 1 started")
    sleep(2)
    print("Task 1 completed")
    semaphore.signal()
}

DispatchQueue.global().async {
    semaphore.wait()
    print("Task 2 started")
    sleep(2)
    print("Task 2 completed")
    semaphore.signal()
}

21. Explain dispatch group function.
Dispatch groups are a way to block a thread until one or more tasks finish executing. 
You can use this behavior in places where you cannot make progress until all of the specified tasks are complete. 
For example, after dispatching several tasks to compute some data, 
you might use a group to wait on those tasks and then process the results when they are done.
Add the corresponding tasks to a dispatch group and wait on the entire group.

func say(_ text: String) {
 print("text")
}

let group = DispatchGroup()

print("Hi")

group.enter()
say("I love cookies") {
    group.leave()
}

group.enter()
say("My dog is called Emma") {
    group.leave()
}

group.enter()
say("I develop iOS apps") {
    group.leave()
}

group.notify(queue: .main) {
    print("Goodbye")
}

let group = DispatchGroup()
let queue = DispatchQueue.global()

group.enter()
queue.async {
    print("Task 1")
    group.leave()
}

group.enter()
queue.async {
    print("Task 2")
    group.leave()
}

group.notify(queue: .main) {
    print("All tasks completed")
}

22. Is Dispatch queue thread safe?
Dispatch queues themselves are thread safe. 
In other words, you can submit tasks to a dispatch queue from any thread on the system without first taking a lock or synchronizing access to the queue.

23. Why serial dispatch queue instead of lock.
Avoid taking locks from the tasks you submit to a dispatch queue. 
Although it is safe to use locks from your tasks, when you acquire the lock, you risk blocking a serial queue entirely if that lock is unavailable. 
Similarly, for concurrent queues, waiting on a lock might prevent other tasks from executing instead. 
If you need to synchronize parts of your code, use a serial dispatch queue instead of a lock.

24. What is dispatch sources?
A dispatch source is a fundamental data type that coordinates the processing of specific low-level system events. 
Timers 
System notifications
Descriptor

let timer = DispatchSource.makeTimerSource(queue: DispatchQueue.global())
timer.schedule(deadline: .now(), repeating: 1.0)
timer.setEventHandler {
    print("Timer fired")
}
timer.resume()

25. How does dispatch_once differ from lazy initialization in Swift?
dispatch_once was used in Objective-C for ensuring a block of code executes only once. In Swift, it’s replaced by the lazy keyword for thread-safe initialization of static variables.

class Singleton {
    static let shared = Singleton() // Thread-safe lazy initialization
    private init() {}
}

26.  What is the difference between notify and wait in a dispatch group?
	•	notify: Executes a block of code on a specified queue after all tasks in the group are complete. Non-blocking.
	•	wait: Blocks the current thread until all tasks in the group are complete.

let group = DispatchGroup()

DispatchQueue.global().async(group: group) {
    print("Task 1")
}

group.notify(queue: .main) {
    print("All tasks completed")
}

group.wait() // Blocks until all tasks are complete

27. What is dispatch_after, and how is it used in Swift?
dispatch_after is used to execute a block after a delay. In Swift, this is replaced by asyncAfter.

DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
    print("Task executed after delay")
}

28. What is thread explosion, and how does GCD prevent it?
Thread explosion occurs when too many threads are created, causing performance degradation. 
GCD prevents this by maintaining a thread pool and using cooperative thread management, which ensures efficient resource utilization.

29. 













