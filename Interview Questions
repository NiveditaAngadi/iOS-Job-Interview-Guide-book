
1. How dynamic librariers are linked in the App?
In Xcode, dynamic linking means that when you build an application, it only includes references to necessary external libraries (called frameworks on macOS) at compile time, 
and then actually loads and links those libraries into memory only when the application runs, allowing for smaller executable sizes and the ability to update libraries independently of the app itself; 
essentially, the required code is loaded at runtime instead of being embedded directly in the application binary at compile time.

Key points about dynamic linking in Xcode:
Dynamic libraries (dylibs):
On macOS, shared libraries are called "dynamic libraries" or "dylibs" and are the primary mechanism for dynamic linking. 
Dynamic loader:
When an application starts, the operating system's dynamic loader (dyld) locates and loads all the required dylibs based on
the information stored in the application's executable.

Benefits:
Reduced application size: Only the necessary parts of the libraries are loaded into memory when needed, resulting in smaller executable files. 
Memory efficiency: Multiple applications can share the same copy of a dynamic library in memory, reducing overall memory usage. 
Flexibility in updates: You can update a shared library without needing to recompile all applications that use it. 

How to use in Xcode:
Link frameworks: When adding external libraries to your project, select the "Framework" option in the "General" 
settings of your target to link them dynamically. 
Search paths: Ensure the build settings include the correct search paths to locate the necessary dylibs on your system. 

2. Why @selector in the Swift? 
Selectors in Swift are compatible with Objective-C methods 
because Swift can interoperate with the Objective-C runtime. When you use a Selector in Swift, 
you reference a method name as an Objective-C selector. 
This allows Swift code to dynamically call the referenced method implementation on a target object.
https://developer.apple.com/documentation/swift/using-objective-c-runtime-features-in-swift

3. Why Objective-C compare to Swift?
Legacy code support 
C/C++ code interoperability is easier in case of Objective-C 
Method swizzling (method swap), dynamic dispatch is extensive in Objective-C 

4. Challenges faced in the App development recently.

5. Why Viper, why not MVVM 

6. From scratch why select VIPER, how do you get ready the team for development. 

7. What is SSL pinning?
SSL pinning is a security technique that protects online connections from man-in-the-middle (MITM) attacks

SSL pinning involves pre-configuring an app 
or device with a specific certificate or public key, called the "pin". 
When the app or device communicates with a server, it compares the server's certificate or public key with the pinned value. 
If the values match, the connection is considered secure. 

Benefits
SSL pinning helps prevent attempts to intercept or tamper with communication. It's considered one of the best ways to make application traffic secure. 
How to implement
There are two main ways to implement SSL pinning: 
Pin the certificate: Download the server's certificate and bundle it into the app. 
Pin the public key: Retrieve the certificate's public key and include it in the app's code as a string. 
The choice between these two options depends on the app's needs and the server's configuration. 


8. Is Keychain stored data is app specific or device specific?
Keychain data is primarily device specific on Apple devices, meaning that data stored in the keychain on one device cannot be directly accessed by another device 
unless specifically configured to sync through iCloud Keychain, 
and even then, access is still tied to the user's Apple ID on that device; however, within a device, 
individual apps can only access their own keychain data, making it app-specific within the context of that device. 
Key points about Keychain data:
Device-centric security:
The encryption key for keychain data is tied to the device, making it difficult to access data on a different device even if you have the same Apple ID. 
App-specific access:
Each app can only access the keychain data it has specifically stored, preventing other apps from accessing sensitive information. 
iCloud Keychain syncing:
Users can choose to enable iCloud Keychain to sync specific keychain items across their Apple devices, but this still requires authentication with the user's Apple ID on each device.

9. Define the security fix you have encountered?

10. Define the memory managment in app - how you handled. 

11. What is Dispatch Barrier?

12. Write a function - generic to add two numbers, strings or any type.

protocol addition {
    associatedtype ItemType
    func add(_ n1: ItemType) -> ItemType
}

extension String: addition {
    typealias ItemType = String
    
    func add(_ n1: String) -> String {
        return self + n1
    }
}

extension Int : addition {
    typealias ItemType = Int
    
    func add(_ n1: Int) -> Int {
        return self + n1
    }
}

extension Double : addition {
    typealias ItemType = Double
    
    func add(_ n1: Double) -> Double {
        return self + n1
    }
}

"Hello".add("World")
1.add(3)
1.5.add(2.4)

protocol addTwoItemType {
    associatedtype ItemType
    func addTwo(_ n1: ItemType, _ n2: ItemType) -> ItemType
}

struct addTwoInt : addTwoItemType {
    typealias ItemType = Int
    
    func addTwo(_ n1: Int, _ n2: Int) -> Int {
        return n1 + n2
    }
}

struct addTwoDouble : addTwoItemType {
    typealias ItemType = Double
    
    func addTwo(_ n1: Double, _ n2: Double) -> Double {
        return n1 + n2
    }
}

struct addTwoString : addTwoItemType {
    typealias ItemType = String
    
    func addTwo(_ n1: String, _ n2: String) -> String {
        return n1 + n2
    }
}

addTwoInt().addTwo(1, 2)
addTwoDouble().addTwo(1.5, 2.4)
addTwoString().addTwo("Hello", "World") 



13. Difference between Objective-C and Swift 

14. Threading explain 

15. GCD - GCD group 

16. Operation Queue 

17. How you do code review 

18. what is Semaphore ? Dispatch Semaphore ? How do you create normal semaphore?



