1. Fundamentals of Objective-C
  - Objective-C is dynamically typed, where as Swift is statically typed. 
  - Objective-C uses verbose syntax with square brackets ([ ]), while swift has a concise and modern syntax. 
  - Objetive-C allows runtime features like method swizzling, which are limited in Swift 
  - Swift provides better safety with type inference, optionals, and bound checking, while objective-C requires manual checks. 

2. What is the difference between id, NSObject, and instancetype?
id: A generic, dynamically typed object pointer that can represent any Objective-C object. No compile-time type checking.
NSObject: The base class of most Objective-C classes. Objects inheriting from NSObject can use its methods like retain and release.
instancetype: A compile-time type that ensures the return type matches the class type, making it safer and more predictable than id.

3. How does Objective-C achieve dynamic dispatch?
Objective-C uses a message-passing mechanism to achieve dynamic dispatch. 
When you send a message to an object ([object message]), 
the runtime looks up the method implementation in the object’s class or superclass method table (objc_msgSend). 
This allows runtime flexibility, such as swapping methods (method swizzling).

4. Memory Management - Explain how memory management works in Objective-C.
Objective-C uses Automatic Reference Counting (ARC) to manage memory. Key points include:
Retain: Increases the reference count for an object.
Release: Decreases the reference count. When it reaches zero, the object is deallocated.
Autorelease: Marks an object for delayed release, typically at the end of the current run loop.

Developers must manage memory carefully in non-ARC environments by manually balancing retain and release calls.

5. What is a memory leak in Objective-C, and how can you prevent it?
A memory leak occurs when allocated memory is not deallocated, often due to retain cycles. To prevent memory leaks:
	•	Use weak references to break retain cycles in properties like delegates.
	•	Use tools like Instruments in Xcode to identify memory leaks.

6. What is the difference between weak and assign in Objective-C?
	•	weak: Used for object references. The reference is automatically set to nil when the object is deallocated (ARC handles this).
	•	assign: Used for primitive types (e.g., int, float). It does not manage object memory and can lead to dangling pointers if used with objects.

7. Runtime features 
Method swizzling is a process of dynamically replacing the implementation of a method at runtime. 
It’s commonly used for logging, analytics, or modifying behavior.
Use with caution, as it can make debugging harder and introduce unexpected behavior.

#import <objc/runtime.h>

void SwizzleMethod(Class class, SEL originalSelector, SEL swizzledSelector) {
    Method originalMethod = class_getInstanceMethod(class, originalSelector);
    Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector);

    method_exchangeImplementations(originalMethod, swizzledMethod);
}

8. What is the role of the Objective-C runtime library?
The runtime library (libobjc) handles dynamic features of Objective-C, such as:
	•	Message sending (objc_msgSend).
  •	Dynamic method resolution.
  •	Adding classes, methods, or properties at runtime.
  •	Introspection (checking object types at runtime using isKindOfClass: or respondsToSelector:).

9. What is @dynamic and when would you use it?
@dynamic tells the compiler that the getter and setter methods for a property will be implemented dynamically at runtime, 
rather than being automatically synthesized.

In Core Data, properties are dynamically generated by the framework:
@dynamic name;

10. Protocols and Categories
What are the key differences between Protocols and Categories in Objective-C?
	•	Protocols: Define a set of methods that a class must implement (similar to interfaces). They are declared with @protocol.
 	•	Categories: Extend the functionality of an existing class by adding new methods without modifying its source code.
    Declared with @interface ClassName (CategoryName).

11. Can categories override existing methods? What are the risks?
Yes, categories can override existing methods. However:
	•	The original implementation is replaced across the app, leading to unintended side effects.
  •	There’s no way to call the original implementation unless explicitly saved before overriding.

12. Swift Interoperability - How does Objective-C interact with Swift?
	•	Using Swift in Objective-C: Swift classes and methods marked with @objc are exposed to Objective-C.
	•	Using Objective-C in Swift: Bridging headers (.h) allow Swift to use Objective-C classes.
	•	Objective-C types like NSString, NSArray, and NSDictionary bridge seamlessly to Swift types (String, Array, Dictionary).

13. How do you expose an Objective-C class to Swift?
Add the Objective-C header file (.h) to the bridging header in your Swift project:

// Bridging-Header.h
#import "YourObjectiveCClass.h"

14. Advanced Topics - What is KVO (Key-Value Observing) in Objective-C? How is it implemented?
KVO allows observing changes to a property. It’s implemented using the runtime to dynamically subclass the observed object.
[self addObserver:self forKeyPath:@"propertyName" options:NSKeyValueObservingOptionNew context:nil];
Handle changes in:
- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context {
    // Handle changes
}

15. How do you implement Dependency Injection in Objective-C?
Dependency Injection is implemented by passing dependencies to a class via:
	•	Initializer Injection:
- (instancetype)initWithService:(Service *)service {
    self = [super init];
    if (self) {
        _service = service;
    }
    return self;
}
	•	Property Injection:
@property (nonatomic, strong) Service *service;

16. Debugging and Optimization: How do you debug an Objective-C application effectively?
	•	Use breakpoints and the debugger console in Xcode.
	•	Use runtime introspection methods like class_getInstanceMethod and objc_msgSend for advanced debugging.
	•	Use Instruments for profiling memory leaks, CPU usage, and performance bottlenecks.

17. How would you optimize a slow Objective-C application?
- Profile with Instruments to identify bottlenecks.
- Reduce dynamic dispatch in performance-critical paths.
- Optimize memory usage by avoiding over-retaining objects.
- Use efficient data structures, like NSSet instead of NSArray for lookups.
